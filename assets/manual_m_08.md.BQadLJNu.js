import{_ as s,c as t,o as a,R as i}from"./chunks/framework.BhNW9Jg7.js";const e="/exercise-form-docs.github.io/assets/step1.5rcufVK1.png",l="/exercise-form-docs.github.io/assets/step2.vNKlGPS4.png",n="/exercise-form-docs.github.io/assets/step3.Blw3P2aA.png",o="/exercise-form-docs.github.io/assets/step4.BW-lCFaq.png",p="/exercise-form-docs.github.io/assets/step5.c1MXvCsh.png",r="/exercise-form-docs.github.io/assets/step6.BgI_ERt-.png",h="/exercise-form-docs.github.io/assets/step7.UWvCM3-B.png",x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"manual/m_08.md","filePath":"manual/m_08.md","lastUpdated":1719395294000}'),d={name:"manual/m_08.md"},c=i('<h2 id="弹框和抽屉" tabindex="-1">弹框和抽屉 <a class="header-anchor" href="#弹框和抽屉" aria-label="Permalink to &quot;弹框和抽屉&quot;">​</a></h2><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><ol><li>如下准备好抽屉、弹框、按钮组件</li></ol><img src="'+e+'" data-fancybox="gallery"><ol start="2"><li>给抽屉、弹框、按钮添加触发事件</li></ol><p>给抽屉添加关闭</p><img src="'+l+'" data-fancybox="gallery"><p>给弹框添加关闭</p><img src="'+n+'" data-fancybox="gallery"><p>给按钮添加打开抽屉和打开弹框的事件</p><img src="'+o+'" data-fancybox="gallery"><img src="'+p+'" data-fancybox="gallery"><ol><li>预览表单，点击 打开抽屉、打开弹框：效果图如下</li></ol><p>打开抽屉</p><img src="'+r+'" data-fancybox="gallery"><p>打开弹框</p><img src="'+h+`" data-fancybox="gallery"><p>弹出框、侧边抽屉分别对应于el-dialog、el-drawer两个组件的封装</p><blockquote><p>弹框框和侧边抽屉在表单默认不显示，需要调用组件暴露出来的openModel，closeModel方法进行打开和关闭</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> widgetRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getWidgetRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;组件唯一ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).widgetRef; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取当前组件的Ref</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打开</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">widgetRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 关闭</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">widgetRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="交互事件" tabindex="-1">交互事件 <a class="header-anchor" href="#交互事件" aria-label="Permalink to &quot;交互事件&quot;">​</a></h3><table><thead><tr><th>方法</th><th>描述</th><th style="text-align:center;">回调</th></tr></thead><tbody><tr><td><code>openModel</code></td><td>打开抽屉或弹框</td><td style="text-align:center;">----</td></tr><tr><td><code>closeModel</code></td><td>关闭抽屉或弹框</td><td style="text-align:center;">----</td></tr></tbody></table>`,22),g=[c];function k(_,m,y,E,f,u){return a(),t("div",null,g)}const F=s(d,[["render",k]]);export{x as __pageData,F as default};
